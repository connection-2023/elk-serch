input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.27.jre7.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "${DB_URL}"
    jdbc_user => "${DB_USER}"
    jdbc_password => "${DB_PASSWORD}"
    jdbc_validate_connection => true
    use_column_value => true 
    tracking_column => "updatedat"    
    tracking_column_type => "timestamp"
    clean_run => false
    jdbc_paging_enabled => true
    jdbc_page_size => 10000
    jdbc_pool_timeout => 300
    schedule => "* * * * *"
    statement => '
      SELECT
        lecture."id",
        lecture."title",
        Lecture."stars",
        Lecture."price",
        Lecture."reviewCount",
        Lecture."isGroup",
        Lecture."difficultyLevel",
        Lecture."startDate",
        Lecture."endDate",
        Lecture."updatedAt",
        Lecture."isActive",

        (SELECT  lectureMethod.name
          FROM "LectureMethod" lectureMethod
          WHERE lecture."lectureMethodId" = lectureMethod.id) AS lectureMethod,

        (SELECT json_agg(lectureImage."imageUrl")::text
          FROM "LectureImage" lectureImage
          WHERE lecture."id" = lectureImage."lectureId") AS images_string,

        (SELECT json_agg(json_build_object(
          \'day\', lectureDay."day", 
          \'dateTime\', LectureDay."dateTime"
          )):: TEXT
          FROM "LectureDay" lectureDay
          WHERE lecture.id = lectureDay."lectureId") AS days_string,

        (SELECT json_build_object( 
          \'lecturerId\', lecturer.id,
          \'nickname\', lecturer."nickname",
          \'profileCardImageUrl\', lecturer."profileCardImageUrl" )::text
          FROM "Lecturer" lecturer
          WHERE lecture."lecturerId" = lecturer.id) AS lecturer_string,
          
        (SELECT json_agg(json_build_object( 
            \'regionId\', region.id,
            \'administrativeDistrict\', region."administrativeDistrict", 
            \'district\', region."district"
          ))::text
          FROM "LectureToRegion" lectureToRegion
          JOIN "Region" region ON lectureToRegion."regionId" = region.id
          WHERE lecture.id = lectureToRegion."lectureId") AS regions_string,

        (SELECT json_agg(json_build_object( 
          \'categoryId\', lectureToDanceGenre."danceCategoryId",
          \'genre\', 
          CASE
          WHEN lectureToDanceGenre."name" IS NULL THEN danceCategory."genre"
          ELSE lectureToDanceGenre."name"
        END))::text
        FROM "LectureToDanceGenre" lectureToDanceGenre 
        JOIN "DanceCategory" danceCategory 
        ON lectureToDanceGenre."danceCategoryId" = danceCategory.id
        WHERE lecture.id = lectureToDanceGenre."lectureId") AS genres_string

      FROM
        "Lecture" lecture

      WHERE
          lecture."updatedAt" > :sql_last_value
      '
    last_run_metadata_path =>"/usr/share/logstash/lecture-inspector-index.dat"
 }

}

filter {
  json {
    source => "regions_string"
    target => "regions"
  }
  json {
    source => "genres_string"
    target => "genres"
  }
  json {
    source => "lecturer_string"
    target => "lecturer"
  } 
  json {
    source => "images_string"
    target => "lectureImages"
  }
  json {
    source => "days_string"
    target => "days"
  }


  
  mutate {
    remove_field =>["@timestamp", "@version","lecturer_string", "images_string","regions_string","genres_string", "days_string"]
  }
}

output {
  elasticsearch {
		hosts => ["${ES_SERVER}"]
		user => "elastic"
		password => "test123"
    index => "lecture"
    document_id => "%{id}"
    data_stream => false
    manage_template => true
    template_overwrite => true
    template_name => "lecture_template"
    # template => "/usr/share/logstash/lecture_template.json"
	}
  stdout {
    codec => rubydebug
  }
}