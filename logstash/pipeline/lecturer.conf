input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.27.jre7.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "${DB_URL}"
    jdbc_user => "${DB_USER}"
    jdbc_password => "${DB_PASSWORD}"
    jdbc_validate_connection => true
    use_column_value => true 
    tracking_column => "updatedat"    
    tracking_column_type => "timestamp"
    clean_run => false
    jdbc_paging_enabled => true
    jdbc_page_size => 10000
    jdbc_pool_timeout => 300
    schedule => "* * * * *"
    statement => '
      SELECT
        Lecturer.id,
        Lecturer."profileCardImageUrl",
        Lecturer."nickname",
        Lecturer."stars",
        Lecturer."affiliation",
        Lecturer."reviewCount",
        Lecturer."updatedAt",

        (SELECT json_agg(json_build_object( 
        \'regionId\', region.id,
        \'administrativeDistrict\', region."administrativeDistrict", 
        \'district\', region."district"
        ))::text
        FROM "LecturerRegion" lecturerRegion
        JOIN "Region" region ON lecturerRegion."regionId" = Region.id
        WHERE lecturer.id = lecturerRegion."lecturerId") AS regions_string,
        
        (SELECT json_agg(json_build_object( 
          \'categoryId\', lecturerDanceGenre."danceCategoryId",
          \'genre\', 
          CASE
          WHEN lecturerDanceGenre."name" IS NULL THEN danceCategory."genre"
          ELSE lecturerDanceGenre."name"
        END))::text
        FROM "LecturerDanceGenre" lecturerDanceGenre 
        JOIN "DanceCategory" danceCategory 
        ON lecturerDanceGenre."danceCategoryId" = danceCategory.id
        WHERE lecturer.id = lecturerDanceGenre."lecturerId") AS genres_string

      FROM
        "Lecturer" lecturer
      WHERE
          lecturer."updatedAt" > :sql_last_value
    '
    last_run_metadata_path =>"/usr/share/logstash/lecturer-inspector-index.dat"
 }

}

filter {
  json {
    source => "regions_string"
    target => "regions"
  }
  json {
    source => "genres_string"
    target => "genres"
  }

  
  mutate {
    remove_field =>["@timestamp", "@version","regions_string","genres_string", "updatedAt"]
  }
}

output {
  elasticsearch {
		hosts => ["elasticsearch:9200"]
		user => "elastic"
		password => "test123"
    index => "lecturer"
    document_id => "%{id}"
    data_stream => false
    manage_template => true
    template_overwrite => true
    template_name => "lecturer_template"
    template => "/usr/share/logstash/lecturer_template.json"
	}
  stdout {
    codec => rubydebug
  }
}